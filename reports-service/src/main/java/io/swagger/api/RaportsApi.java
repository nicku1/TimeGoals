/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Raport;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-23T20:13:09.961561888Z[GMT]")
@Validated
public interface RaportsApi {

    @Operation(summary = "Get list of all raports", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of raports", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Raport.class)))) })
    @RequestMapping(value = "/raports",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Raport>> raportsGet();


    @Operation(summary = "Create a new raport", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Raport created successfully") })
    @RequestMapping(value = "/raports",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> raportsPost(@Parameter(in = ParameterIn.DEFAULT, description = "Raport object to be created", required=true, schema=@Schema()) @Valid @RequestBody Raport body
);


    @Operation(summary = "Delete a raport by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Raport deleted successfully") })
    @RequestMapping(value = "/raports/{raportId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> raportsRaportIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("raportId") Integer raportId
);


    @Operation(summary = "Get a raport by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Raport details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Raport.class))),
        
        @ApiResponse(responseCode = "404", description = "Raport not found") })
    @RequestMapping(value = "/raports/{raportId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Raport> raportsRaportIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("raportId") Integer raportId
);


    @Operation(summary = "Update an existing raport", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Raport updated successfully") })
    @RequestMapping(value = "/raports/{raportId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> raportsRaportIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("raportId") Integer raportId
, @Parameter(in = ParameterIn.DEFAULT, description = "Updated raport object", required=true, schema=@Schema()) @Valid @RequestBody Raport body
);

}

